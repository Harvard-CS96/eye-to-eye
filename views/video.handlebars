<!DOCTYPE html>
<html lang="en">

    <head>
        <title>Textroulette</title>

        <!-- Required meta tags -->
        <meta charset="utf-8">
        <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">


        <style>
            video {
                width: 49.5%;
            }
        </style>
        <!-- Bootstrap CSS -->
        <link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/css/bootstrap.min.css" integrity="sha384-PsH8R72JQ3SOdhVi3uxftmaW6Vc51MKb0q5P2rRUpPvrszuE4W1povHYgTpBfshb" crossorigin="anonymous">
    </head>

    <body>
        <nav class="navbar navbar-toggleable-md navbar-light bg-faded">
            <a class="navbar-brand" href="#">Discourse</a>
            <input class="btn btn-outline-danger my-2 my-sm-0" type="button" id="logout" value="Logout" />
        </nav>
        <div class="container mt-5">
            <div class="row text-center">
                <div class="col-md-12" style="height:100%;">
                    <h1>Discourse</h1>
                    <p id="identity"></p>
                    <!-- where the messages will apend in -->
                    <div id="notice"></div>
                    <div id="chat" class="border bg-light text-left p-3" style="min-height:20em;overflow:scroll;">
                        <video id="localVideo"></video>
                        <span id="remoteVideos"></span>
                    </div>

                    <!-- form and input box to submit messages -->
                    <div class="row">
                        <div class="col-md-12">
                            <button id="end-conversation" class="btn btn-danger" style="width:100%;" disabled="true">End Conversation</button>
                        </div>
                    </div>

                    <a href="/updateStances">Update Your Stances</a>
                </div>
            </div>
        </div>

        <script src="/static/js/simplewebrtc.js"></script>
        <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js" integrity="sha384-KJ3o2DKtIkvYIK3UENzmM7KCkRr/rE9/Qpg6aAZGJwFDMVNA/GpGFF93hXpG5KkN" crossorigin="anonymous"></script>

        <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.12.3/umd/popper.min.js" integrity="sha384-vFJXuSJphROIrBnz7yo7oB41mKfc8JzQZiCq4NCceLEaO4IHwicKwpJf9c9IpFgh" crossorigin="anonymous"></script>

        <script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0-beta.2/js/bootstrap.min.js" integrity="sha384-alpBpkh1PFOepccYVYDB4do5UnbKysX5WZXm3XxPqe5iKTfUKjNkCk9SaVuEZflJ" crossorigin="anonymous"></script>

        <script>
            // Store user identity info
            const isAuthenticated = {{ isAuthenticated }}
            const user = {{{ user }}}
            // Identify the hostname for the signaling server, taking care to
            // include port number if necessary (for localhost debugging envs)
            var host;
            if (window.location.port) {
                host = window.location.protocol + '//' + window.location.hostname + ':' + window.location.port;
            } else {
                host = "/";
            }
            var webrtc = new SimpleWebRTC({
                // the id/element dom element that will hold "our" video
                localVideoEl: 'localVideo',
                // the id/element dom element that will hold remote videos
                remoteVideosEl: 'remoteVideos',
                // immediately ask for camera access
                autoRequestMedia: true,
                // set signaling server
                url: host,
                debug: true
            });
            function matchPartner() {
                // leave current room, if any
                webrtc.leaveRoom();
                // Disable End Conversation Button
                $("#end-conversation").prop('disabled', 'true');
                // tell the server to match user to new partner
                webrtc.connection.emit("request match")
            }
            webrtc.connection.on("waiting", function() {
                // Tell user matching is happening
                $("#notice").text("Matching you to another user...");
                // Disable End Conversation Button
                $("#end-conversation").prop('disabled', 'true');
            })
            webrtc.connection.on("recall username", function(username) {
                $("#identity").text("Hello, " + username);
            });
            webrtc.connection.on("pairing", function(partner, room) {
                // leave current room, if any
                webrtc.leaveRoom();
                // join new room
                webrtc.joinRoom(room);
                // Update Notice Text
                $("#notice").text("You are talking with " + partner);
                // Enable the end conversation Button
                $("#end-conversation").prop('disabled', null);
            });
            // When the webSocket connection is ready, identify the users
            webrtc.on('connectionReady', function() {
                // Identify user to matcher
                webrtc.connection.emit("set user", {
                    username: user.facebook.name,
                    user_id: user.uuid
                });
            });
            // Wait until video capabilities are ready to perform first match
            webrtc.on('readyToCall', matchPartner);
            // When user ends conversation, start a new match
            $("#end-conversation").click(function() {
                webrtc.connection.emit("hangup");
                matchPartner();
            });
            // Logout upon clicking logout button
            $("#logout").click(function() {
                window.location.href = '/logout';
            });

        </script>


    </body>


</html>
